[gd_scene load_steps=4 format=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Spatial

const NOTHING = 0
const CUBE = 1
const MODELING = 0
const VALIDATING = 1
const CUBE_SIZE = Vector3(1,1,1)
const SURFACE_TILE_SCALE = Vector3(1,0.2,1)
const ZOOM_FACTOR = 0.1
const CUBE_MATERIAL = preload(\"res://materials/elementMaterial.tres\")
const VALIDATOR_MATERIAL = preload(\"res://materials/overlay.tres\")

var m_currentSelect = {}

var m_map

var m_camera

var m_positionInMatrix = Vector3(0,0,0)

var m_minPoint
var m_maxPoint

var m_state = MODELING

func _ready():
	m_camera = Camera.new()
	m_camera.set_environment(get_node(\"environment\").get_environment())
	m_camera.look_at_from_position(Vector3(10,10,10), Vector3(0,0,0), Vector3(0,1,0))
	add_child(m_camera)
	m_currentSelect = newCube(Vector3(0,0,0))
	creationMatrix(10, 10, 10)
	
	var light = get_node(\"DirectionalLight\").look_at_from_position(Vector3(10, 15, -10), Vector3(0,0,0), Vector3(0,1,0))
	minPoint = Vector3(-5, -5, -5)
	maxPoint = Vector3(5, 5, 5)
	
	var ground = get_node(\"ground\")
	ground.set_translation(Vector3(0, minPoint.y, 0))
	ground.set_scale(Vector3(maxPoint.x, 1, maxPoint.z))
	
#	drawScene(Vector3(-5, -5, -5), Vector3(5, 5, 5))
	#drawGrid(Vector3(-5, -5, -5), Vector3(5, 5, 5),1)
	
	set_process(true)
	
func creationMatrix(var sizeX, var sizeY, var sizeZ):
	m_map = []
	m_map.resize(sizeX)
	for i in range(sizeX):
		m_map[i] = []
		m_map[i].resize(sizeY)
		for j in range(sizeY):
			m_map[i][j] = []
			m_map[i][j].resize(sizeZ)
			for k in range(sizeZ):
				m_map[i][j][k] = {}
				m_map[i][j][k].typeMesh = NOTHING
				m_map[i][j][k].mesh = null
				m_map[i][j][k].surface = false
	

func _process(delta):
	if controlCamera() == false:
		control()
	
func controlCamera():
	if Input.is_action_just_released(\"ui_control_camera_zoom_up\"):
		var dir = -m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(0,0,0), Vector3(0,1,0))
		return true
	elif Input.is_action_just_released(\"ui_control_camera_zoom_down\"):
		var dir = m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(0,0,0), Vector3(0,1,0))
		return true
	return false
	
func control():
	if m_state == MODELING :
		if Input.is_action_just_released(\"ui_down\"):
			m_positionInMatrix.x += 1
			translate(Vector3(1, 0, 0))
		elif Input.is_action_just_released(\"ui_up\"):
			m_positionInMatrix.x -= 1
			translate(Vector3(-1, 0, 0))
		elif Input.is_action_just_released(\"ui_right\"):
			m_positionInMatrix.z -= 1
			translate(Vector3(0, 0, -1))
		elif Input.is_action_just_released(\"ui_left\"):
			m_positionInMatrix.z += 1
			translate(Vector3(0, 0, 1))
		elif Input.is_action_just_released(\"ui_levelYup\"):
			m_positionInMatrix.y += 1
			translate(Vector3(0, 1, 0))
		elif Input.is_action_just_released(\"ui_levelYdown\"):
			m_positionInMatrix.y -= 1
			translate(Vector3(0, -1, 0))
		elif Input.is_action_just_released(\"ui_select\"):
			putCube(m_currentSelect)
		elif Input.is_action_just_released(\"ui_open_inventory\"):
			m_state = VALIDATING
			initValidationMode()
	elif m_state == VALIDATING :
		if Input.is_action_just_released(\"ui_down\"):
			m_positionInMatrix.z += 1
			translate(Vector3(0, 0, 1))
		elif Input.is_action_just_released(\"ui_up\"):
			m_positionInMatrix.z -= 1
			translate(Vector3(0, 0, -1))
		elif Input.is_action_just_released(\"ui_right\"):
			m_positionInMatrix.x += 1
			translate(Vector3(1, 0, 0))
		elif Input.is_action_just_released(\"ui_left\"):
			m_positionInMatrix.x -= 1
			translate(Vector3(-1, 0, 0))
		elif Input.is_action_just_released(\"ui_levelYup\"):
			m_positionInMatrix.y += 1
			translate(Vector3(0, 1, 0))
		elif Input.is_action_just_released(\"ui_levelYdown\"):
			m_positionInMatrix.y -= 1
			translate(Vector3(0, -1, 0))
		elif Input.is_action_just_released(\"ui_select\"):
			putValidator(m_currentSelect)

func translate(var translation):
	m_currentSelect.meshInstance.global_translate(translation)
	
func initValidationMode():
	var newPosition = m_currentSelect.meshInstance.get_translation() + Vector3(0, CUBE_SIZE.y * 0.5, 0) + Vector3(0, CUBE_SIZE.y * SURFACE_TILE_SCALE.y * 0.5, 0)
	m_currentSelect = newValidator(newPosition)

func newValidator(position):
	var validator = MeshInstance.new()
	var cubeMesh = CubeMesh.new()
	cubeMesh.set_size(Vector3(1, 0.2, 1))
	validator.set_material_override(m_validatorMaterial)
	validator.set_mesh(cubeMesh)
	validator.set_translation(Vector3(position.x, position.y, position.z))
	m_positionInMatrix.y += 1
	add_child(validator)
	return {\"meshInstance\" : validator}
	
func removeCube(var cube):
	remove_child(cube)
	cube.queue_free()
	

func putCube(var cube):
	if m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].typeMesh == NOTHING:
		m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].mesh = cube
		m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].typeMesh = CUBE
		m_currentSelect = newCube(cube.meshInstance.get_translation())
	else:
		print(\"Dej√† mis en place\")

func putValidator(var validator):
	if m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].surface == false && m_map[m_positionInMatrix.x][m_positionInMatrix.y - 1][m_positionInMatrix.z].typeMesh != NOTHING: 
		m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].surface = true
		m_currentSelect = newValidator(validator.get_translation())
	else:
		print(\"validator impossible to place\")
	
func newCube(var position):
	var cubeMeshInstance = MeshInstance.new()
	var cubeMesh = CubeMesh.new()
	cubeMesh.set_size(Vector3(1,1,1))
	cubeMeshInstance.set_material_override(m_cubeMaterial)
	cubeMeshInstance.set_mesh(cubeMesh)
	cubeMeshInstance.set_translation(position)
#	var boundingBox = drawBoundingBox(position)
	add_child(cubeMeshInstance)
#	cubeMeshInstance.add_child(boundingBox)
	return {\"meshInstance\": cubeMeshInstance}

func drawBoundingBox(var position):
	print(position)
	var line = ImmediateGeometry.new()
	line.clear()
	line.begin(Mesh.PRIMITIVE_LINE_LOOP)
	line.add_vertex(position + Vector3(0.9,0.9,0.9))
	line.add_vertex(position + Vector3(0,0.9,0.9))
	line.add_vertex(position + Vector3(0,0,0.9))
	line.add_vertex(position + Vector3(0.9,0,0.9))
	line.end()
	line.begin(Mesh.PRIMITIVE_LINE_LOOP)
	line.add_vertex(position + Vector3(0.9,0.9,0.9))
	line.add_vertex(position + Vector3(0,0.9,0.9))
	line.add_vertex(position + Vector3(0,0.9,0))
	line.add_vertex(position + Vector3(0.9,0.9,0))
	line.end()
	line.begin(Mesh.PRIMITIVE_LINE_LOOP)
	line.add_vertex(position + Vector3(0.9,0.9,0.9))
	line.add_vertex(position + Vector3(0.9,0.9,0))
	line.add_vertex(position + Vector3(0.9,0,0))
	line.add_vertex(position + Vector3(0.9,0,0.9))
	line.end()
#	line.begin(Mesh.PRIMITIVE_LINE_STRIP)
#	line.add_vertex(Vector3(0,0,0))
#	line.add_vertex(Vector3(1,0,0))
#	line.add_vertex(Vector3(1,1,0))
#	line.add_vertex(Vector3(0,1,0))
#	line.set_normal(Vector3(0,-1,0))
#	line.add_vertex(Vector3(0,0,0))
#	line.end()
#	line.begin(Mesh.PRIMITIVE_LINE_STRIP)
#	line.add_vertex(Vector3(0,0,0))
#	line.add_vertex(Vector3(0,1,0))
#	line.add_vertex(Vector3(0,1,1))
#	line.add_vertex(Vector3(0,0,1))
#	line.add_vertex(Vector3(0,0,0))
#	line.end()
#	line.begin(Mesh.PRIMITIVE_LINE_STRIP)
#	line.add_vertex(Vector3(0,0,0))
#	line.add_vertex(Vector3(0,0,1))
#	line.add_vertex(Vector3(1,0,1))
#	line.add_vertex(Vector3(1,0,0))
#	line.add_vertex(Vector3(0,0,0))
#	line.end()
	return line
	
func drawGrid(var minPoint, var maxPoint, var intervalDistance):
	var grid = ImmediateGeometry.new()
	var i = minPoint.x
	var j = minPoint.y
	var k = minPoint.z

	var interval = 0
	while k <= maxPoint.z:
		j = minPoint.y
		while j <= maxPoint.y:
			grid.begin(Mesh.PRIMITIVE_LINES)
			grid.add_vertex(Vector3(minPoint.x, j, k))
			grid.add_vertex(Vector3(maxPoint.x, j, k))
			grid.end()
			j += intervalDistance
		k += intervalDistance
	k = minPoint.z
	while k <= maxPoint.z:
		i = minPoint.x
		while i <= maxPoint.x:
			grid.begin(Mesh.PRIMITIVE_LINES)
			grid.add_vertex(Vector3(i, minPoint.y, k))
			grid.add_vertex(Vector3(i, maxPoint.y, k))
			grid.end()
			i += intervalDistance
		k += intervalDistance
	i = minPoint.x
	while i <= maxPoint.x:
		j = minPoint.y
		while j <= maxPoint.y:
			grid.begin(Mesh.PRIMITIVE_LINES)
			grid.add_vertex(Vector3(i, j, minPoint.z))
			grid.add_vertex(Vector3(i, j, maxPoint.z))
			grid.end()
			j += intervalDistance
		i += intervalDistance
	var material = SpatialMaterial.new()
	material.set_flag(SpatialMaterial.FLAG_ALBEDO_FROM_VERTEX_COLOR, true)
	material.set_flag(SpatialMaterial.FLAG_UNSHADED, true)
	material.set_albedo(Color(0.5,0.5,0.5,0.2))
	grid.set_material_override(material)
	add_child(grid)
"

[sub_resource type="Environment" id=2]

background_mode = 1
background_sky_custom_fov = 0.0
background_color = Color( 1, 1, 1, 1 )
background_energy = 1.0
background_canvas_max_layer = 0
ambient_light_color = Color( 0, 0, 0, 1 )
ambient_light_energy = 0.1
ambient_light_sky_contribution = 1.0
fog_enabled = false
fog_color = Color( 0.5, 0.6, 0.7, 1 )
fog_sun_color = Color( 1, 0.9, 0.7, 1 )
fog_sun_amount = 0.0
fog_depth_enabled = true
fog_depth_begin = 10.0
fog_depth_curve = 1.0
fog_transmit_enabled = false
fog_transmit_curve = 1.0
fog_height_enabled = false
fog_height_min = 0.0
fog_height_max = 100.0
fog_height_curve = 1.0
tonemap_mode = 2
tonemap_exposure = 1.0
tonemap_white = 1.0
auto_exposure_enabled = false
auto_exposure_scale = 0.4
auto_exposure_min_luma = 0.05
auto_exposure_max_luma = 8.0
auto_exposure_speed = 0.5
ss_reflections_enabled = false
ss_reflections_max_steps = 64
ss_reflections_fade_in = 0.15
ss_reflections_fade_out = 2.0
ss_reflections_depth_tolerance = 0.2
ss_reflections_roughness = true
ssao_enabled = false
ssao_radius = 1.0
ssao_intensity = 1.0
ssao_radius2 = 0.0
ssao_intensity2 = 1.0
ssao_bias = 0.01
ssao_light_affect = 0.0
ssao_color = Color( 0, 0, 0, 1 )
ssao_quality = 0
ssao_blur = 3
ssao_edge_sharpness = 4.0
dof_blur_far_enabled = false
dof_blur_far_distance = 10.0
dof_blur_far_transition = 5.0
dof_blur_far_amount = 0.1
dof_blur_far_quality = 1
dof_blur_near_enabled = false
dof_blur_near_distance = 2.0
dof_blur_near_transition = 1.0
dof_blur_near_amount = 0.1
dof_blur_near_quality = 1
glow_enabled = false
glow_levels/1 = false
glow_levels/2 = false
glow_levels/3 = true
glow_levels/4 = false
glow_levels/5 = true
glow_levels/6 = false
glow_levels/7 = false
glow_intensity = 0.8
glow_strength = 1.0
glow_bloom = 0.0
glow_blend_mode = 2
glow_hdr_threshold = 1.0
glow_hdr_scale = 2.0
glow_bicubic_upscale = false
adjustment_enabled = false
adjustment_brightness = 1.0
adjustment_contrast = 1.0
adjustment_saturation = 1.0
_sections_unfolded = [ "Ambient Light", "Background" ]

[sub_resource type="PlaneMesh" id=3]

size = Vector2( 2, 2 )
subdivide_width = 0
subdivide_depth = 0

[node name="MapModeller" type="Spatial"]

script = SubResource( 1 )
_sections_unfolded = [ "Transform", "Visibility" ]

[node name="environment" type="WorldEnvironment" parent="." index="0"]

environment = SubResource( 2 )
_sections_unfolded = [ "Pause" ]

[node name="DirectionalLight" type="DirectionalLight" parent="." index="1"]

transform = Transform( 0.740606, -0.558191, 0.374067, 0, 0.556698, 0.830715, -0.67194, -0.615232, 0.412293, 10, 4.61357, 10 )
layers = 1
light_color = Color( 1, 1, 1, 1 )
light_energy = 1.0
light_indirect_energy = 1.0
light_negative = false
light_specular = 0.5
light_bake_mode = 1
light_cull_mask = -1
shadow_enabled = true
shadow_color = Color( 0, 0, 0, 1 )
shadow_bias = 0.1
shadow_contact = 0.03
shadow_reverse_cull_face = false
editor_only = false
directional_shadow_mode = 0
directional_shadow_split_1 = 0.1
directional_shadow_split_2 = 0.1
directional_shadow_split_3 = 1.0
directional_shadow_blend_splits = false
directional_shadow_normal_bias = 0.8
directional_shadow_bias_split_scale = 0.25
directional_shadow_depth_range = 0
directional_shadow_max_distance = 200.0
_sections_unfolded = [ "Directional Shadow", "Light", "Shadow", "Transform" ]

[node name="ground" type="MeshInstance" parent="." index="2"]

layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 3 )
skeleton = NodePath("..")
material/0 = null
_sections_unfolded = [ "Transform" ]


