[gd_scene load_steps=5 format=2]

[ext_resource path="res://materials/elementMaterial.tres" type="Material" id=1]

[sub_resource type="GDScript" id=1]

resource_name = "map_modeler_script"
script/source = "extends \"res://RPGFightFramework/scripts/mapMatrix3D.gd\"

########################################################################################################################################
###################################################		SIGNALS	########################################################################
########################################################################################################################################
signal clickRightMap
signal clickLeftCellMap

########################################################################################################################################
###################################################		MEMBERS	########################################################################
########################################################################################################################################
const HEIGHT = 20
const DEEP = 20
const WIDTH = 20
const ZOOM_FACTOR = 0.1
const TOOLS = preload(\"res://RPGFightFramework/scripts/modeler/tools.gd\")
var m_lastClickPositionInMap
var m_camera
var m_plan
var m_orientationModeler = Vector3(1,0,0)
var m_originModeler = Vector3(WIDTH*0.5,0,DEEP*0.5)

########################################################################################################################################
###################################################		METHODS	########################################################################
########################################################################################################################################
func _init().():
	m_origin = Vector3(-WIDTH*0.5, 0, -DEEP*0.5)
	m_sizeCell = Vector3(1,1,1)
	m_matrix = []
	for i in range(WIDTH):
		m_matrix.append([])
		for j in range(HEIGHT):
			m_matrix[i].append([])
			for k in range(DEEP):
				m_matrix[i][j].append([])
				m_matrix[i][j][k] = {}
	m_initialPositionsCharacters = [Vector3(0, 0, 0), Vector3(0, 0, 1)]
	m_initialPositionsEnemis = [Vector3(2, 0, 2), Vector3(3, 0, 4)]
	
func _ready():
	m_camera = Camera.new()
	m_camera.set_environment(get_node(\"environment\").get_environment())
	m_camera.look_at_from_position(Vector3(12,12,12), Vector3(2.5,0,2.5), Vector3(0,1,0))
	add_child(m_camera)
	
	var player = load(\"res://RPGFightFramework/scenes/perso/leo.tscn\").instance()
	player.set_scale(Vector3(0.5,0.5,0.5))
	player.set_translation(Vector3(0, 0.5, 0))
	add_child(player)
	
	var meshInstance = get_node(\"MeshInstance\")
	meshInstance.set_scale(Vector3(WIDTH, 1, HEIGHT))
	
	m_overlayCells = MultiMeshInstance.new()
	m_overlayCells.set_name(\"Overlays\")
	var multimesh = MultiMesh.new()
	multimesh.set_color_format(MultiMesh.COLOR_FLOAT)
	multimesh.set_mesh(load(\"res://RPGFightFramework/scenes/perso/overlay.tscn\").instance().get_mesh())
	#A report : Bug de chez Godot ?? Si on met à la main dans l'instanciation de la scène çà ne marche pas
	multimesh.set_transform_format(MultiMesh.TRANSFORM_3D)
	multimesh.set_instance_count(WIDTH * DEEP)
	var material = SpatialMaterial.new()
	m_overlayCells.set_multimesh(multimesh)
	m_overlayCells.set_material_override(material)
	material.set_flag(SpatialMaterial.FLAG_ALBEDO_FROM_VERTEX_COLOR, true)
	for i in range(WIDTH * DEEP):
		var t = Transform(Basis(), Vector3(-1000, -1000, -1000))
		m_overlayCells.get_multimesh().set_instance_transform(i, t)
		m_overlayCells.get_multimesh().set_instance_color(i, Color(0, 1, 1))
	add_child(m_overlayCells)
	
	m_plan = Plane(Vector3(0,1,0), 0)
	
	var mapLayout = TOOLS.searchParentNodeRecursive(self, \"SelectionModeLayout\")
	#signals
	mapLayout.connect(\"addCaracteristicSignal\", self, \"on_addCaracteristic\")
	mapLayout.connect(\"addMapLevelDownSignal\", self, \"on_addMapLevelDown\")
	mapLayout.connect(\"addGroupSignal\", self, \"on_addGroup\")
	connect(\"clickRightMap\", mapLayout, \"on_clickRightMap\")
	connect(\"clickLeftCellMap\", mapLayout, \"on_clickLeftCellMap\")
	
	set_process(true)
	
func _process(delta):
	controlCamera()
	
func _input(event):
	if event is InputEventMouseButton:
		if event.get_button_index() == BUTTON_LEFT && event.pressed == false:
			var index = positionToIndex(getIntersectionPoint(getMousePosition())).abs()
			emit_signal(\"clickRightMap\", index)
		elif event.get_button_index() == BUTTON_RIGHT && event.pressed== false:
			m_lastClickPositionInMap = getMousePosition()
			if isOverlayCellAtIndex(positionToIndex(getIntersectionPoint(m_lastClickPositionInMap))):
				emit_signal(\"clickLeftCellMap\", positionToIndex(getIntersectionPoint(m_lastClickPositionInMap)))
				set_process_input(false)
	
func addOverlaySelection(var index):
	if isInsideMatrixBounds(index):
		if addOverlayCellByIndex(index):
#			m_listPositions.push_back(index)
			return 1
		return 0
	return -1
			
func saveOverlaySelection():
	removeAllOverlayCells()
	
#TODO : a gérer mieu que çà surtout pour la 2D
func controlCamera():
	if Input.is_action_just_released(\"ui_control_camera_zoom_up\"):
		var dir = -m_camera.get_translation().normalized() * ZOOM_FACTOR
#		var up = m_camera.get_camera_transform().
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(2.5,0,2.5), Vector3(0,1,0))
		return true
	elif Input.is_action_just_released(\"ui_control_camera_zoom_down\"):
		var dir = m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(2.5,0,2.5), Vector3(0,1,0))
		return true
	return false
	
func getIntersectionPoint(var mousePosition):
	return m_plan.intersects_ray(m_camera.project_ray_origin(mousePosition), m_camera.project_ray_normal(mousePosition)) 
	
func getMousePosition():
	return get_viewport().get_mouse_position()
	
func getNextPlayerInitPosition():
	return m_initialPositionsCharacters.pop_front()

func getNextEnemiInitPosition():
	return m_initialPositionsEnemis.pop_front()

func selectOverlay(var vec):
	setColorOverlayMeshInstance(vec, Color(1, 0, 0))
	
func deselectOverlay(var vec):
	setColorOverlayMeshInstance(vec, Color(0, 1, 1))
	
func to2DPlan(var camera):
	camera.look_at_from_position(Vector3(0,20,0), Vector3(0, 0, 0), Vector3(0,0,1))
func to3DPlan(var camera):
	camera.look_at_from_position(Vector3(12,12,12), Vector3(2.5,0,2.5), Vector3(0,1,0))
	
########################################################################################################################################
###################################################		SLOTS	########################################################################
########################################################################################################################################
func on_addCaracteristic(var cellIndex, var carac):
	var cell = m_matrix[cellIndex.x][cellIndex.y][cellIndex.z]
	if !cell.has(\"modeler\"):
		cell[\"modeler\"] = {}
	if !cell[\"modeler\"].has(\"carac\"):
		cell[\"modeler\"][\"carac\"] = []
	cell[\"modeler\"][\"carac\"].append(carac)
	
func on_addMapLevelDown(var cellIndex, var map):
	var cell = m_matrix[cellIndex.x][cellIndex.y][cellIndex.z]
	if !cell.has(\"modeler\"):
		cell[\"modeler\"] = {}
	cell[\"modeler\"][\"levelDown\"] = map
	
func on_addGroup(var cellIndex, var group):
	var cell = m_matrix[cellIndex.x][cellIndex.y][cellIndex.z]
	if !cell.has(\"modeler\"):
		cell[\"modeler\"] = {}
	if !cell[\"modeler\"].has(\"group\"):
		cell[\"modeler\"][\"group\"] = []
	cell[\"modeler\"][\"group\"].append(group)

func _on_OptionButton_item_selected(ID):
	print(ID)
	if ID == 1:
		to2DPlan(m_camera)
	if ID == 0:
		to3DPlan(m_camera)
"
_sections_unfolded = [ "Resource" ]

[sub_resource type="Environment" id=2]

background_mode = 1
background_sky_custom_fov = 0.0
background_color = Color( 0.363281, 0.363281, 0.363281, 1 )
background_energy = 1.0
background_canvas_max_layer = 0
ambient_light_color = Color( 0, 0, 0, 1 )
ambient_light_energy = 0.1
ambient_light_sky_contribution = 1.0
fog_enabled = false
fog_color = Color( 0.5, 0.6, 0.7, 1 )
fog_sun_color = Color( 1, 0.9, 0.7, 1 )
fog_sun_amount = 0.0
fog_depth_enabled = true
fog_depth_begin = 10.0
fog_depth_curve = 1.0
fog_transmit_enabled = false
fog_transmit_curve = 1.0
fog_height_enabled = false
fog_height_min = 0.0
fog_height_max = 100.0
fog_height_curve = 1.0
tonemap_mode = 2
tonemap_exposure = 1.0
tonemap_white = 1.0
auto_exposure_enabled = false
auto_exposure_scale = 0.4
auto_exposure_min_luma = 0.05
auto_exposure_max_luma = 8.0
auto_exposure_speed = 0.5
ss_reflections_enabled = false
ss_reflections_max_steps = 64
ss_reflections_fade_in = 0.15
ss_reflections_fade_out = 2.0
ss_reflections_depth_tolerance = 0.2
ss_reflections_roughness = true
ssao_enabled = false
ssao_radius = 1.0
ssao_intensity = 1.0
ssao_radius2 = 0.0
ssao_intensity2 = 1.0
ssao_bias = 0.01
ssao_light_affect = 0.0
ssao_color = Color( 0, 0, 0, 1 )
ssao_quality = 0
ssao_blur = 3
ssao_edge_sharpness = 4.0
dof_blur_far_enabled = false
dof_blur_far_distance = 10.0
dof_blur_far_transition = 5.0
dof_blur_far_amount = 0.1
dof_blur_far_quality = 1
dof_blur_near_enabled = false
dof_blur_near_distance = 2.0
dof_blur_near_transition = 1.0
dof_blur_near_amount = 0.1
dof_blur_near_quality = 1
glow_enabled = false
glow_levels/1 = false
glow_levels/2 = false
glow_levels/3 = true
glow_levels/4 = false
glow_levels/5 = true
glow_levels/6 = false
glow_levels/7 = false
glow_intensity = 0.8
glow_strength = 1.0
glow_bloom = 0.0
glow_blend_mode = 2
glow_hdr_threshold = 1.0
glow_hdr_scale = 2.0
glow_bicubic_upscale = false
adjustment_enabled = false
adjustment_brightness = 1.0
adjustment_contrast = 1.0
adjustment_saturation = 1.0
_sections_unfolded = [ "Ambient Light", "Background" ]

[sub_resource type="PlaneMesh" id=3]

size = Vector2( 1, 1 )
subdivide_width = 0
subdivide_depth = 0

[node name="Modeleur" type="Spatial" index="0"]

script = SubResource( 1 )
_sections_unfolded = [ "Transform", "Visibility" ]

[node name="environment" type="WorldEnvironment" parent="." index="0"]

environment = SubResource( 2 )
_sections_unfolded = [ "Pause" ]

[node name="DirectionalLight" type="DirectionalLight" parent="." index="1"]

transform = Transform( 0.740606, -0.558191, 0.374067, 0, 0.556698, 0.830715, -0.67194, -0.615232, 0.412293, 10, 4.61357, 10 )
layers = 1
light_color = Color( 1, 1, 1, 1 )
light_energy = 1.0
light_indirect_energy = 1.0
light_negative = false
light_specular = 0.5
light_bake_mode = 1
light_cull_mask = -1
shadow_enabled = true
shadow_color = Color( 0, 0, 0, 1 )
shadow_bias = 0.1
shadow_contact = 0.03
shadow_reverse_cull_face = false
editor_only = false
directional_shadow_mode = 0
directional_shadow_split_1 = 0.1
directional_shadow_split_2 = 0.1
directional_shadow_split_3 = 1.0
directional_shadow_blend_splits = false
directional_shadow_normal_bias = 0.8
directional_shadow_bias_split_scale = 0.25
directional_shadow_depth_range = 0
directional_shadow_max_distance = 200.0
_sections_unfolded = [ "Directional Shadow", "Light", "Shadow", "Transform" ]

[node name="MeshInstance" type="MeshInstance" parent="." index="2"]

layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 3 )
skeleton = NodePath("..")
material/0 = ExtResource( 1 )
_sections_unfolded = [ "Transform", "material" ]

[node name="OptionButton" type="OptionButton" parent="." index="3"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 87.0
margin_bottom = 20.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
focus_mode = 2
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
action_mode = 0
enabled_focus_mode = 2
shortcut = null
group = null
text = "3D"
flat = false
align = 0
items = [ "3D", null, false, 0, null, "2D", null, false, 1, null ]
selected = 0

[connection signal="item_selected" from="OptionButton" to="." method="_on_OptionButton_item_selected"]


