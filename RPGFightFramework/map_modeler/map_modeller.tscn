[gd_scene load_steps=6 format=2]

[ext_resource path="res://materials/elementMaterial.tres" type="Material" id=1]
[ext_resource path="res://RPGFightFramework/scenes/perso/overlayMultiMesh.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]

script/source = "extends Spatial

var m_matrix
var m_sizeElement
var m_camera

const HEIGHT = 20
const WIDTH = 20

const ZOOM_FACTOR = 0.1

var m_plan

var m_initialPositionsCharacters
var m_initialPositionsEnemis

func _init():
	m_sizeElement = 2
	m_matrix = []
	for i in range(5):
		m_matrix.append([])
		for j in range(5):
			m_matrix[i].append([])
			for k in range(5):
				m_matrix[i][j].append({\"type\" : 0})
	for i in range(5):
		for j in range(5):
			m_matrix[i][0][j].type = 1
	m_initialPositionsCharacters = [Vector3(0, 0, 0), Vector3(0, 0, 1)]
	m_initialPositionsEnemis = [Vector3(2, 0, 2), Vector3(3, 0, 4)]

func _process(delta):
	controlCamera()
	
func getIntersectionPoint():
	var mousePosition = get_viewport().get_mouse_position()
	return m_plan.intersects_ray(m_camera.project_ray_origin(mousePosition), m_camera.project_ray_normal(mousePosition)) 
	
func controlCamera():
	if Input.is_action_just_released(\"ui_control_camera_zoom_up\"):
		var dir = -m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(2.5,0,2.5), Vector3(0,1,0))
		return true
	elif Input.is_action_just_released(\"ui_control_camera_zoom_down\"):
		var dir = m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(2.5,0,2.5), Vector3(0,1,0))
		return true
	return false
	
func _ready():
	m_camera = Camera.new()
	m_camera.set_environment(get_node(\"environment\").get_environment())
	m_camera.look_at_from_position(Vector3(12,12,12), Vector3(2.5,0,2.5), Vector3(0,1,0))
	add_child(m_camera)
	
	var meshInstance = get_node(\"MeshInstance\")
	meshInstance.set_scale(Vector3(WIDTH, 1, HEIGHT))
	
	var multiMesh = get_node(\"MultiMeshInstance\")
	multiMesh.get_multimesh().set_instance_count(1)
	
	m_plan = Plane(Vector3(0,1,0), 0)
	
	set_process(true)"

[sub_resource type="Environment" id=2]

background_mode = 1
background_sky_custom_fov = 0.0
background_color = Color( 0.363281, 0.363281, 0.363281, 1 )
background_energy = 1.0
background_canvas_max_layer = 0
ambient_light_color = Color( 0, 0, 0, 1 )
ambient_light_energy = 0.1
ambient_light_sky_contribution = 1.0
fog_enabled = false
fog_color = Color( 0.5, 0.6, 0.7, 1 )
fog_sun_color = Color( 1, 0.9, 0.7, 1 )
fog_sun_amount = 0.0
fog_depth_enabled = true
fog_depth_begin = 10.0
fog_depth_curve = 1.0
fog_transmit_enabled = false
fog_transmit_curve = 1.0
fog_height_enabled = false
fog_height_min = 0.0
fog_height_max = 100.0
fog_height_curve = 1.0
tonemap_mode = 2
tonemap_exposure = 1.0
tonemap_white = 1.0
auto_exposure_enabled = false
auto_exposure_scale = 0.4
auto_exposure_min_luma = 0.05
auto_exposure_max_luma = 8.0
auto_exposure_speed = 0.5
ss_reflections_enabled = false
ss_reflections_max_steps = 64
ss_reflections_fade_in = 0.15
ss_reflections_fade_out = 2.0
ss_reflections_depth_tolerance = 0.2
ss_reflections_roughness = true
ssao_enabled = false
ssao_radius = 1.0
ssao_intensity = 1.0
ssao_radius2 = 0.0
ssao_intensity2 = 1.0
ssao_bias = 0.01
ssao_light_affect = 0.0
ssao_color = Color( 0, 0, 0, 1 )
ssao_quality = 0
ssao_blur = 3
ssao_edge_sharpness = 4.0
dof_blur_far_enabled = false
dof_blur_far_distance = 10.0
dof_blur_far_transition = 5.0
dof_blur_far_amount = 0.1
dof_blur_far_quality = 1
dof_blur_near_enabled = false
dof_blur_near_distance = 2.0
dof_blur_near_transition = 1.0
dof_blur_near_amount = 0.1
dof_blur_near_quality = 1
glow_enabled = false
glow_levels/1 = false
glow_levels/2 = false
glow_levels/3 = true
glow_levels/4 = false
glow_levels/5 = true
glow_levels/6 = false
glow_levels/7 = false
glow_intensity = 0.8
glow_strength = 1.0
glow_bloom = 0.0
glow_blend_mode = 2
glow_hdr_threshold = 1.0
glow_hdr_scale = 2.0
glow_bicubic_upscale = false
adjustment_enabled = false
adjustment_brightness = 1.0
adjustment_contrast = 1.0
adjustment_saturation = 1.0
_sections_unfolded = [ "Ambient Light", "Background" ]

[sub_resource type="PlaneMesh" id=3]

size = Vector2( 2, 2 )
subdivide_width = 0
subdivide_depth = 0

[node name="Modelleur" type="Spatial"]

script = SubResource( 1 )
_sections_unfolded = [ "Transform", "Visibility" ]

[node name="environment" type="WorldEnvironment" parent="." index="0"]

environment = SubResource( 2 )
_sections_unfolded = [ "Pause" ]

[node name="DirectionalLight" type="DirectionalLight" parent="." index="1"]

transform = Transform( 0.740606, -0.558191, 0.374067, 0, 0.556698, 0.830715, -0.67194, -0.615232, 0.412293, 10, 4.61357, 10 )
layers = 1
light_color = Color( 1, 1, 1, 1 )
light_energy = 1.0
light_indirect_energy = 1.0
light_negative = false
light_specular = 0.5
light_bake_mode = 1
light_cull_mask = -1
shadow_enabled = true
shadow_color = Color( 0, 0, 0, 1 )
shadow_bias = 0.1
shadow_contact = 0.03
shadow_reverse_cull_face = false
editor_only = false
directional_shadow_mode = 0
directional_shadow_split_1 = 0.1
directional_shadow_split_2 = 0.1
directional_shadow_split_3 = 1.0
directional_shadow_blend_splits = false
directional_shadow_normal_bias = 0.8
directional_shadow_bias_split_scale = 0.25
directional_shadow_depth_range = 0
directional_shadow_max_distance = 200.0
_sections_unfolded = [ "Directional Shadow", "Light", "Shadow", "Transform" ]

[node name="MeshInstance" type="MeshInstance" parent="." index="2"]

layers = 1
material_override = null
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 3 )
skeleton = NodePath("..")
material/0 = ExtResource( 1 )
_sections_unfolded = [ "material" ]

[node name="MultiMeshInstance" parent="." index="3" instance=ExtResource( 2 )]


