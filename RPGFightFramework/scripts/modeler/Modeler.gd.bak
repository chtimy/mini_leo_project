extends Spatial

########################################################################################################################################
###################################################		MEMBERS	########################################################################
########################################################################################################################################

const NOTHING = 0
const CUBE = 1
const MODELING = 0
const VALIDATING = 1
const CUBE_SIZE = Vector3(1,1,1)
const SURFACE_TILE_SCALE = Vector3(1,0.2,1)
const ZOOM_FACTOR = 0.1
const CUBE_MATERIAL = preload("res://materials/elementMaterial.tres")
const VALIDATOR_MATERIAL = preload("res://materials/overlay.tres")

var m_currentSelect = {}
var m_map
var m_camera
var m_positionInMatrix = Vector3(0,0,0)
var m_minPoint
var m_maxPoint

var m_state = MODELING

func _ready():
	m_camera = Camera.new()
	m_camera.set_environment(get_node("environment").get_environment())
	m_camera.look_at_from_position(Vector3(10,10,10), Vector3(0,0,0), Vector3(0,1,0))
	add_child(m_camera)
	m_currentSelect = newCube(Vector3(0,0,0))
	creationMatrix(10, 10, 10)

	var light = get_node("DirectionalLight").look_at_from_position(Vector3(10, 15, -10), Vector3(0,0,0), Vector3(0,1,0))
	minPoint = Vector3(-5, -5, -5)
	maxPoint = Vector3(5, 5, 5)

	var ground = get_node("ground")
	ground.set_translation(Vector3(0, minPoint.y, 0))
	ground.set_scale(Vector3(maxPoint.x, 1, maxPoint.z))

#	drawScene(Vector3(-5, -5, -5), Vector3(5, 5, 5))
	#drawGrid(Vector3(-5, -5, -5), Vector3(5, 5, 5),1)

	set_process(true)

func creationMatrix(var sizeX, var sizeY, var sizeZ):
	m_map = []
	m_map.resize(sizeX)
	for i in range(sizeX):
		m_map[i] = []
		m_map[i].resize(sizeY)
		for j in range(sizeY):
			m_map[i][j] = []
			m_map[i][j].resize(sizeZ)
			for k in range(sizeZ):
				m_map[i][j][k] = {}
				m_map[i][j][k].typeMesh = NOTHING
				m_map[i][j][k].mesh = null
				m_map[i][j][k].surface = false


func _process(delta):
	if controlCamera() == false:
		control()

func controlCamera():
	if Input.is_action_just_released("ui_control_camera_zoom_up"):
		var dir = -m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(0,0,0), Vector3(0,1,0))
		return true
	elif Input.is_action_just_released("ui_control_camera_zoom_down"):
		var dir = m_camera.get_translation().normalized() * ZOOM_FACTOR
		m_camera.look_at_from_position(m_camera.get_translation() + dir, Vector3(0,0,0), Vector3(0,1,0))
		return true
	return false

func control():
	if m_state == MODELING :
		if Input.is_action_just_released("ui_down"):
			m_positionInMatrix.x += 1
			translate(Vector3(1, 0, 0))
		elif Input.is_action_just_released("ui_up"):
			m_positionInMatrix.x -= 1
			translate(Vector3(-1, 0, 0))
		elif Input.is_action_just_released("ui_right"):
			m_positionInMatrix.z -= 1
			translate(Vector3(0, 0, -1))
		elif Input.is_action_just_released("ui_left"):
			m_positionInMatrix.z += 1
			translate(Vector3(0, 0, 1))
		elif Input.is_action_just_released("ui_levelYup"):
			m_positionInMatrix.y += 1
			translate(Vector3(0, 1, 0))
		elif Input.is_action_just_released("ui_levelYdown"):
			m_positionInMatrix.y -= 1
			translate(Vector3(0, -1, 0))
		elif Input.is_action_just_released("ui_select"):
			putCube(m_currentSelect)
		elif Input.is_action_just_released("ui_open_inventory"):
			m_state = VALIDATING
			initValidationMode()
	elif m_state == VALIDATING :
		if Input.is_action_just_released("ui_down"):
			m_positionInMatrix.z += 1
			translate(Vector3(0, 0, 1))
		elif Input.is_action_just_released("ui_up"):
			m_positionInMatrix.z -= 1
			translate(Vector3(0, 0, -1))
		elif Input.is_action_just_released("ui_right"):
			m_positionInMatrix.x += 1
			translate(Vector3(1, 0, 0))
		elif Input.is_action_just_released("ui_left"):
			m_positionInMatrix.x -= 1
			translate(Vector3(-1, 0, 0))
		elif Input.is_action_just_released("ui_levelYup"):
			m_positionInMatrix.y += 1
			translate(Vector3(0, 1, 0))
		elif Input.is_action_just_released("ui_levelYdown"):
			m_positionInMatrix.y -= 1
			translate(Vector3(0, -1, 0))
		elif Input.is_action_just_released("ui_select"):
			putValidator(m_currentSelect)

func translate(var translation):
	m_currentSelect.meshInstance.global_translate(translation)

func initValidationMode():
	var newPosition = m_currentSelect.meshInstance.get_translation() + Vector3(0, CUBE_SIZE.y * 0.5, 0) + Vector3(0, CUBE_SIZE.y * SURFACE_TILE_SCALE.y * 0.5, 0)
	m_currentSelect = newValidator(newPosition)

func newValidator(position):
	var validator = MeshInstance.new()
	var cubeMesh = CubeMesh.new()
	cubeMesh.set_size(Vector3(1, 0.2, 1))
	validator.set_material_override(m_validatorMaterial)
	validator.set_mesh(cubeMesh)
	validator.set_translation(Vector3(position.x, position.y, position.z))
	m_positionInMatrix.y += 1
	add_child(validator)
	return {"meshInstance" : validator}

func removeCube(var cube):
	remove_child(cube)
	cube.queue_free()


func putCube(var cube):
	if m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].typeMesh == NOTHING:
		m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].mesh = cube
		m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].typeMesh = CUBE
		m_currentSelect = newCube(cube.meshInstance.get_translation())
	else:
		print("Dej√† mis en place")

func putValidator(var validator):
	if m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].surface == false && m_map[m_positionInMatrix.x][m_positionInMatrix.y - 1][m_positionInMatrix.z].typeMesh != NOTHING:
		m_map[m_positionInMatrix.x][m_positionInMatrix.y][m_positionInMatrix.z].surface = true
		m_currentSelect = newValidator(validator.get_translation())
	else:
		print("validator impossible to place")

func newCube(var position):
	var cubeMeshInstance = MeshInstance.new()
	var cubeMesh = CubeMesh.new()
	cubeMesh.set_size(Vector3(1,1,1))
	cubeMeshInstance.set_material_override(m_cubeMaterial)
	cubeMeshInstance.set_mesh(cubeMesh)
	cubeMeshInstance.set_translation(position)
#	var boundingBox = drawBoundingBox(position)
	add_child(cubeMeshInstance)
#	cubeMeshInstance.add_child(boundingBox)
	return {"meshInstance": cubeMeshInstance}

func drawBoundingBox(var position):
	print(position)
	var line = ImmediateGeometry.new()
	line.clear()
	line.begin(Mesh.PRIMITIVE_LINE_LOOP)
	line.add_vertex(position + Vector3(0.9,0.9,0.9))
	line.add_vertex(position + Vector3(0,0.9,0.9))
	line.add_vertex(position + Vector3(0,0,0.9))
	line.add_vertex(position + Vector3(0.9,0,0.9))
	line.end()
	line.begin(Mesh.PRIMITIVE_LINE_LOOP)
	line.add_vertex(position + Vector3(0.9,0.9,0.9))
	line.add_vertex(position + Vector3(0,0.9,0.9))
	line.add_vertex(position + Vector3(0,0.9,0))
	line.add_vertex(position + Vector3(0.9,0.9,0))
	line.end()
	line.begin(Mesh.PRIMITIVE_LINE_LOOP)
	line.add_vertex(position + Vector3(0.9,0.9,0.9))
	line.add_vertex(position + Vector3(0.9,0.9,0))
	line.add_vertex(position + Vector3(0.9,0,0))
	line.add_vertex(position + Vector3(0.9,0,0.9))
	line.end()
#	line.begin(Mesh.PRIMITIVE_LINE_STRIP)
#	line.add_vertex(Vector3(0,0,0))
#	line.add_vertex(Vector3(1,0,0))
#	line.add_vertex(Vector3(1,1,0))
#	line.add_vertex(Vector3(0,1,0))
#	line.set_normal(Vector3(0,-1,0))
#	line.add_vertex(Vector3(0,0,0))
#	line.end()
#	line.begin(Mesh.PRIMITIVE_LINE_STRIP)
#	line.add_vertex(Vector3(0,0,0))
#	line.add_vertex(Vector3(0,1,0))
#	line.add_vertex(Vector3(0,1,1))
#	line.add_vertex(Vector3(0,0,1))
#	line.add_vertex(Vector3(0,0,0))
#	line.end()
#	line.begin(Mesh.PRIMITIVE_LINE_STRIP)
#	line.add_vertex(Vector3(0,0,0))
#	line.add_vertex(Vector3(0,0,1))
#	line.add_vertex(Vector3(1,0,1))
#	line.add_vertex(Vector3(1,0,0))
#	line.add_vertex(Vector3(0,0,0))
#	line.end()
	return line

func drawGrid(var minPoint, var maxPoint, var intervalDistance):
	var grid = ImmediateGeometry.new()
	var i = minPoint.x
	var j = minPoint.y
	var k = minPoint.z

	var interval = 0
	while k <= maxPoint.z:
		j = minPoint.y
		while j <= maxPoint.y:
			grid.begin(Mesh.PRIMITIVE_LINES)
			grid.add_vertex(Vector3(minPoint.x, j, k))
			grid.add_vertex(Vector3(maxPoint.x, j, k))
			grid.end()
			j += intervalDistance
		k += intervalDistance
	k = minPoint.z
	while k <= maxPoint.z:
		i = minPoint.x
		while i <= maxPoint.x:
			grid.begin(Mesh.PRIMITIVE_LINES)
			grid.add_vertex(Vector3(i, minPoint.y, k))
			grid.add_vertex(Vector3(i, maxPoint.y, k))
			grid.end()
			i += intervalDistance
		k += intervalDistance
	i = minPoint.x
	while i <= maxPoint.x:
		j = minPoint.y
		while j <= maxPoint.y:
			grid.begin(Mesh.PRIMITIVE_LINES)
			grid.add_vertex(Vector3(i, j, minPoint.z))
			grid.add_vertex(Vector3(i, j, maxPoint.z))
			grid.end()
			j += intervalDistance
		i += intervalDistance
	var material = SpatialMaterial.new()
	material.set_flag(SpatialMaterial.FLAG_ALBEDO_FROM_VERTEX_COLOR, true)
	material.set_flag(SpatialMaterial.FLAG_UNSHADED, true)
	material.set_albedo(Color(0.5,0.5,0.5,0.2))
	grid.set_material_override(material)
	add_child(grid)
