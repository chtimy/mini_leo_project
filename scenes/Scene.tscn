[gd_scene load_steps=6 format=2]

[ext_resource path="res://images/hud/tmp/inventory_tmp.png" type="Texture" id=1]
[ext_resource path="res://images/hud/tmp/bag_tmp.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]

resource_name = "game_script"
script/source = "extends Node2D

const MINILEO_SPEED = 200
var viewportSize
var currentMap
var miniLeo

func load_texture(file, node):
	node.set_texture(load(file))

func _ready():
	viewportSize = get_viewport_rect().size
	
	#call of on map to instance in the game
	var instancedScene = load(\"res://scenes/Map.tscn\")
	currentMap = instancedScene.instance()
	get_node(\"playedGameLayer\").add_child(currentMap)#call_deferred(\"add_child\", CurrentMap)
	
	#instance the main character
	miniLeo = load(\"res://scenes/MiniLeo.tscn\").instance()
	miniLeo.set_position(viewportSize/2)
	get_node(\"playedGameLayer\").add_child(miniLeo)
	
	#signals connections
	currentMap.get_node(\"objects\").connect(\"pick_object\", self, \"_on_pick_object\")
	
	set_process(true)
	
func _process(delta):
	
	#move mini_leo in relation to the map
	var mapPos = currentMap.get_position()
	var miniLeoSprite = miniLeo.get_node(\"sprite\")
	var miniLeoRect = miniLeoSprite.get_texture().get_size()
	if (Input.is_action_pressed(\"ui_up\")):
		load_texture(\"res://images/mini_leo/derriere.png\", miniLeoSprite)
		mapPos.y += MINILEO_SPEED * delta
	if (Input.is_action_pressed(\"ui_down\")):
		load_texture(\"res://images/mini_leo/face.png\", miniLeoSprite)
		mapPos.y -= MINILEO_SPEED * delta
	if (Input.is_action_pressed(\"ui_left\")):
		load_texture(\"res://images/mini_leo/cote_gauche.png\", miniLeoSprite)
		mapPos.x += MINILEO_SPEED * delta
	if (Input.is_action_pressed(\"ui_right\")):
		load_texture(\"res://images/mini_leo/cote_droit.png\", miniLeoSprite)
		mapPos.x -= MINILEO_SPEED * delta
	currentMap.set_position(mapPos)

func _on_pick_object(object):
	get_node(\"HUDGameLayer/inventory\")._add_in_inventory(object)

func _on_pressed():
	var mouseMotion = InputEvent()
	mouseMotion.type = InputEvent.MOUSE_MOTION
	print(mouseMotion.pos)
"
_sections_unfolded = [ "Resource" ]

[sub_resource type="GDScript" id=2]

resource_name = "HUDGameLayer_script"
script/source = "extends CanvasLayer

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"
var inventory
var inventory_close = true

func _ready():
	inventory = get_node(\"inventory\")
	inventory.hide()
	

func _on_inventoryAccess_button_up():
	if(inventory_close):
		inventory.show()
	else:
		inventory.hide()
	inventory_close = !inventory_close

func _on_liana_button_up():
	var liana = get_node(\"/root/game/playedGameLayer/map/objects/liana\")
	var inventory = get_node(\"/root/game/HUDGameLayer/inventory/sprite\")
	print(liana.get_path())
	liana.move_child(inventory, 1)
	print(liana.get_path())"
_sections_unfolded = [ "Resource" ]

[sub_resource type="GDScript" id=3]

resource_name = "inventory_script"
script/source = "extends Node2D

var inventory = []

func _ready():

	pass

func _add_in_inventory(object):
	inventory.push_back(object)
	var container = get_node(\"gridContainer\")
	container.add_child(object)
	print(container.rect_position)
	object.rect_global_position = Vector2(500,500)
	object.rect_size = Vector2(300,300)
	print(object.rect_global_position)
#	print(\"object\",object.get_size())
#	object.set_size(Vector2(container.get_size().x/5.0,container.get_size().y/2.0))
#	print(\"container\",container.get_size())
#	print(\"object\",object.get_size())
	object.connect(\"pressed\", self, \"_on_pressed\")

func _on_pressed():
	var mouseEvent = InputEventMouseMotion.new()
	#print(mouseEvent.position)
	print(get_node(\"gridContainer/liana\").rect_global_position)
	

"
_sections_unfolded = [ "Resource" ]

[node name="game" type="Node2D" index="0"]

script = SubResource( 1 )

[node name="playedGameLayer" type="CanvasLayer" parent="." index="0"]

layer = 1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="HUDGameLayer" type="CanvasLayer" parent="." index="1"]

layer = 2
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )
script = SubResource( 2 )

[node name="inventory" type="Node2D" parent="HUDGameLayer" index="0"]

script = SubResource( 3 )

[node name="sprite" type="Sprite" parent="HUDGameLayer/inventory" index="0"]

visible = false
position = Vector2( 941.864, 820.635 )
scale = Vector2( 5.6, 4.1 )
texture = ExtResource( 1 )
_sections_unfolded = [ "Transform" ]

[node name="gridContainer" type="GridContainer" parent="HUDGameLayer/inventory" index="1"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
rect_pivot_offset = Vector2( 0, 0 )
mouse_filter = 1
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
columns = 1
_sections_unfolded = [ "Anchor", "Rect" ]

[node name="inventoryAccess" type="TextureButton" parent="HUDGameLayer" index="1"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 40.0
margin_bottom = 40.0
rect_pivot_offset = Vector2( 0, 0 )
focus_mode = 2
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
texture_normal = ExtResource( 2 )
_sections_unfolded = [ "Rect" ]

[connection signal="button_up" from="HUDGameLayer/inventoryAccess" to="HUDGameLayer" method="_on_inventoryAccess_button_up"]


