[gd_scene load_steps=8 format=2]

[ext_resource path="res://images/hud/tmp/inventory_tmp.png" type="Texture" id=1]
[ext_resource path="res://images/hud/inventory/frame.png" type="Texture" id=2]
[ext_resource path="res://images/hud/inventory/frame_3.png" type="Texture" id=3]
[ext_resource path="res://images/hud/tmp/bag_tmp.png" type="Texture" id=4]

[sub_resource type="GDScript" id=1]

resource_name = "game_script"
script/source = "extends Node2D

signal grap_object_in_inventory
signal remove_current_object_from_inventory

const MINILEO_SPEED = 200
const GAME = 0
const HUD = 1
var viewportSize
var currentMap
var miniLeo
var state

var interactionsBetweenObjects2

func load_texture(file, node):
	node.set_texture(load(file))

func _ready():
	print(\"game node : begin ready function\")
	
	viewportSize = get_viewport_rect().size
	
	#call of on map to instance in the game
	var instancedScene = load(\"res://scenes/Map.tscn\")
	currentMap = instancedScene.instance()
	get_node(\"playedGameLayer\").add_child(currentMap)#call_deferred(\"add_child\", CurrentMap)
	
	#instance the main character
	miniLeo = load(\"res://scenes/MiniLeo.tscn\").instance()
	miniLeo.set_position(viewportSize/2)
	get_node(\"playedGameLayer\").add_child(miniLeo)
	
	#signals connections
	currentMap.get_node(\"objects\").connect(\"pick_object\", self, \"on_pick_object\") 
	currentMap.get_node(\"objects\").connect(\"remove_current_object_from_inventory\", self, \"on_remove_current_object_from_inventory\") 
	get_node(\"HUDGameLayer/inventory\").connect(\"grap_object_in_inventory\", self, \"on_send_object_to_character\")
	connect(\"grap_object_in_inventory\", miniLeo, \"on_grap_object_in_inventory\")
	connect(\"remove_current_object_from_inventory\", get_node(\"HUDGameLayer/inventory\"), \"on_remove_current_object_from_inventory\")
	
	state = GAME
	set_process(true)
	
	print(\"game node : end ready function\")
	
func _process(delta):
	if Input.is_action_just_released(\"ui_open_inventory\"):
		print(state)
		if (state == GAME):
			get_node(\"HUDGameLayer\").show()
			state = HUD
		else:
			get_node(\"HUDGameLayer\").hide()
			state = GAME
	else:
		if (state == GAME):
			move_mini_leo(delta)
		elif (state == HUD && get_node(\"HUDGameLayer\").control(Input) == 0):
			get_node(\"HUDGameLayer\").hide()
			state = GAME
	
func move_mini_leo(delta):
	#move mini_leo in relation to the map
	var mapPos = currentMap.get_position()
	var miniLeoSprite = miniLeo.get_node(\"sprite\")
	var miniLeoRect = miniLeoSprite.get_texture().get_size()
	if (Input.is_action_pressed(\"ui_up\")):
		load_texture(\"res://images/mini_leo/derriere.png\", miniLeoSprite)
		mapPos.y += MINILEO_SPEED * delta
	elif (Input.is_action_pressed(\"ui_down\")):
		load_texture(\"res://images/mini_leo/face.png\", miniLeoSprite)
		mapPos.y -= MINILEO_SPEED * delta
	elif (Input.is_action_pressed(\"ui_left\")):
		load_texture(\"res://images/mini_leo/cote_gauche.png\", miniLeoSprite)
		mapPos.x += MINILEO_SPEED * delta
	elif (Input.is_action_pressed(\"ui_right\")):
		load_texture(\"res://images/mini_leo/cote_droit.png\", miniLeoSprite)
		mapPos.x -= MINILEO_SPEED * delta
	currentMap.set_position(mapPos)

func on_pick_object(object):
	print(\"game node : begin on_pick_object function\")		
	get_node(\"HUDGameLayer/inventory\").add_in_inventory(object)
	print(\"game node : end on_pick_object function\")		
	
func on_send_object_to_character(object):
	print(\"game node : begin on_send_object_to_character function\")		
	emit_signal(\"grap_object_in_inventory\", object)
	print(\"game node : end on_send_object_to_character function\")
	
func on_remove_current_object_from_inventory():
	emit_signal(\"remove_current_object_from_inventory\")
	"
_sections_unfolded = [ "Resource" ]

[sub_resource type="GDScript" id=2]

resource_name = "HUDGameLayer_script"
script/source = "extends CanvasLayer

var inventory
var inventory_close = true
enum DIRECTION{LEFT, RIGHT, UP, DOWN}
enum states{INIT, COMBINE}
enum TYPE_FRAME{BASE_FRAME, COMBINE_FRAME}
var state = INIT

func _ready():
	print(\"HUDGameLayer node : begin _ready function\")		
	inventory = get_node(\"inventory\")
	inventory.hide()
	print(\"HUDGameLayer node : end _ready function\")
	
func show():
	inventory.show()

func hide():
	inventory.hide()

func control(event):
	if event.is_action_just_released(\"ui_take\"):
		if(state == INIT):
			inventory.grap_object()
		elif(state == COMBINE) && (inventory.combine_cursor()):
			inventory.combineObjects()
			state = INIT
		return 0
	elif event.is_action_just_released(\"ui_combine\"):
		if(state == INIT):
			inventory.add_combine_cursor()
			state = COMBINE
		elif(state == COMBINE):
			inventory.remove_combine_cursor()
			state = INIT
	elif event.is_action_just_released(\"ui_right\"):
		if(state == INIT):
			get_node(\"inventory\").shift_selection(RIGHT, BASE_FRAME)
		elif(state == COMBINE):
			get_node(\"inventory\").shift_selection(RIGHT, COMBINE_FRAME)
	elif event.is_action_just_released(\"ui_left\"):
		if(state == INIT):
			get_node(\"inventory\").shift_selection(LEFT, BASE_FRAME)
		elif(state == COMBINE):
			get_node(\"inventory\").shift_selection(LEFT, COMBINE_FRAME)
	elif event.is_action_just_released(\"ui_up\"):
		if(state == INIT):
			get_node(\"inventory\").shift_selection(UP, BASE_FRAME)
		elif(state == COMBINE):
			get_node(\"inventory\").shift_selection(UP, COMBINE_FRAME)
	elif event.is_action_just_released(\"ui_down\"):
		if(state == INIT):
			get_node(\"inventory\").shift_selection(DOWN, BASE_FRAME)
		elif(state == COMBINE):
			get_node(\"inventory\").shift_selection(DOWN, COMBINE_FRAME)
	return 1

func _on_liana_button_up():
	print(\"HUDGameLayer node : begin _on_liana_button_up function\")		
	var liana = get_node(\"/root/game/playedGameLayer/map/objects/liana\")
	var inventory = get_node(\"/root/game/HUDGameLayer/inventory/sprite\")
	liana.move_child(inventory, 1)
	print(\"HUDGameLayer node : end _on_liana_button_up function\")			"
_sections_unfolded = [ "Resource" ]

[sub_resource type="GDScript" id=3]

resource_name = "inventory_script"
script/source = "extends Node2D

signal grap_object_in_inventory

enum DIRECTION{LEFT, RIGHT, UP, DOWN}
enum TYPE_FRAME{BASE_FRAME, COMBINE_FRAME}

var sizeInventoryRatio = Vector2(0.5, 0.3)
var positionInventoryRatio = Vector2(0.5, 0.7)
var sizeObjectRatio = Vector2(0.2, 0.5)
var sizeFrameRatio = Vector2(0.2, 0.5)
var sizeCaseInventory = Vector2(0.0, 0.0)

var indexFrame = 0
var nbColumns

var interactionsBetweenObjects

var inventory = []

func _ready():
	print(\"inventory node : begin _ready function\")
	
	interactionsBetweenObjects = [ { \"object1\": 0, \"objet2\": 1 } ]
	
	var viewportSize = get_viewport_rect().size
	var gridContainer = get_node(\"gridContainer\")
	var sizeInventory = sizeInventoryRatio * viewportSize
	nbColumns = gridContainer.get_max_columns()
	
	#position of the node inventory
	self.set_position(viewportSize * positionInventoryRatio - (sizeInventory / 2.0));
	
	var spriteInventory = get_node(\"sprite\")
	gridContainer.rect_size = sizeInventory
	gridContainer.set_fixed_column_width(sizeInventory.x/ nbColumns)
	gridContainer.set_fixed_icon_size(Vector2(gridContainer.get_fixed_column_width(), gridContainer.get_fixed_column_width()))
	#set size of the inventory sprite
	var sizeTextureSprite = spriteInventory.get_texture().get_size()
	spriteInventory.set_scale(sizeInventory/sizeTextureSprite)

	sizeCaseInventory = gridContainer.get_fixed_icon_size()
	
	#place the frame on the first case
	var frame = get_node(\"baseFrame\")
	frame.set_scale(sizeCaseInventory / frame.get_texture().get_size())
	frame = get_node(\"combineFrame\")
	frame.set_scale(sizeCaseInventory / frame.get_texture().get_size())
	frame.hide()
	print(\"inventory node : end _ready function\")		
			
func add_in_inventory(object):
	print(\"inventory node : begin add_in_inventory function\")		
	inventory.push_back(object)
	var container = get_node(\"gridContainer\")
	#container.add_child(object)
	#object.set_custom_minimum_size(container.rect_size * sizeObjectRatio)
	#object.set_position(Vector2(0.0,0.0))
	#object.connect(\"pressed\", self, \"_on_pressed\")
	container.add_icon_item(object.get_texture())
	object.hide()
	print(\"inventory node : end add_in_inventory function\")

func shift_selection(direction, frame_type):
	print(\"inventory node : begin shift_selection function\")
	var frame
	if(frame_type == BASE_FRAME): 
		frame = get_node(\"baseFrame\")
	else:
		frame = get_node(\"combineFrame\")
	print(sizeCaseInventory)
	if(direction == RIGHT):
		frame.set_position(Vector2(frame.get_position().x +  sizeCaseInventory.x, frame.get_position().y))
		indexFrame += indexFrame
	elif(direction == LEFT):
		frame.set_position(Vector2(frame.get_position().x -  sizeCaseInventory.x, frame.get_position().y))
		indexFrame -= indexFrame
	elif(direction == DOWN):
		frame.set_position(Vector2(frame.get_position().x, frame.get_position().y  +  sizeCaseInventory.y))
		indexFrame += nbColumns
	elif(direction == UP):
		frame.set_position(Vector2(frame.get_position().x, frame.get_position().y  -  sizeCaseInventory.y))
		indexFrame -= nbColumns
	print(\"inventory node : end shift_selection function\")

func grap_object():
	print(\"inventory node : begin grap_object function\")
	if inventory.size() > indexFrame:
		var object = inventory[indexFrame]
		if object:
			print(\"grap object in inventory : \", object)
			emit_signal(\"grap_object_in_inventory\", object)
	print(\"inventory node : end grap_object function\")

func on_remove_current_object_from_inventory():
	print(\"inventory node : begin on_remove_current_object_from_inventory function\")
	var container = get_node(\"gridContainer\")
	container.remove_item(indexFrame)
	inventory.remove(indexFrame)
	print(\"inventory node : end on_remove_current_object_from_inventory function\")

func remove_combine_cursor():
	get_node(\"combineFrame\").hide()
	
func add_combine_cursor():
	get_node(\"combineFrame\").show()
	
func combine_cursor():
	print(\"combine\")
	remove_combine_cursor()
	return true
	pass

func combine_objects():
	"
_sections_unfolded = [ "Resource" ]

[node name="game" type="Node2D" index="0"]

script = SubResource( 1 )

[node name="playedGameLayer" type="CanvasLayer" parent="." index="0"]

layer = 1
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="HUDGameLayer" type="CanvasLayer" parent="." index="1"]

layer = 2
offset = Vector2( 0, 0 )
rotation = 0.0
scale = Vector2( 1, 1 )
transform = Transform2D( 1, 0, 0, 1, 0, 0 )
script = SubResource( 2 )

[node name="inventory" type="Node2D" parent="HUDGameLayer" index="0"]

position = Vector2( 941.864, 820.635 )
script = SubResource( 3 )
_sections_unfolded = [ "Transform" ]

[node name="gridContainer" type="ItemList" parent="HUDGameLayer/inventory" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 4.0
margin_right = 40.0
margin_bottom = 44.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = true
focus_mode = 2
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
items = [  ]
select_mode = 0
allow_reselect = false
max_columns = 5
icon_mode = 1
fixed_icon_size = Vector2( 0, 0 )
_sections_unfolded = [ "Columns", "Icon" ]

[node name="sprite" type="Sprite" parent="HUDGameLayer/inventory" index="1"]

visible = false
texture = ExtResource( 1 )
centered = false
region_rect = Rect2( 0, 0, 300, 300 )
_sections_unfolded = [ "Material", "Offset", "Transform", "Z Index" ]

[node name="baseFrame" type="Sprite" parent="HUDGameLayer/inventory" index="2"]

scale = Vector2( 0.05, 0.05 )
texture = ExtResource( 2 )
centered = false
_sections_unfolded = [ "Offset", "Transform" ]

[node name="combineFrame" type="Sprite" parent="HUDGameLayer/inventory" index="3"]

scale = Vector2( 0.05, 0.05 )
texture = ExtResource( 3 )
centered = false
_sections_unfolded = [ "Offset", "Transform" ]

[node name="inventoryAccess" type="TextureButton" parent="HUDGameLayer" index="1"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 40.0
margin_bottom = 40.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
focus_mode = 2
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
group = null
texture_normal = ExtResource( 4 )
_sections_unfolded = [ "Anchor", "Grow Direction", "Margin", "Rect" ]

[connection signal="button_up" from="HUDGameLayer/inventoryAccess" to="HUDGameLayer" method="_on_inventoryAccess_button_up"]


